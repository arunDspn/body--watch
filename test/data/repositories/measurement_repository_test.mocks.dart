// Mocks generated by Mockito 5.1.0 from annotations
// in watcha_body/test/data/repositories/measurement_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:watcha_body/data/data_layer/database_service.dart' as _i2;
import 'package:watcha_body/data/domain/models/pmeasurement.dart' as _i6;
import 'package:watcha_body/data/repositories/measurement_repository.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeDatabaseService_0 extends _i1.Fake implements _i2.DatabaseService {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [MeasurementRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMeasurementRepository extends _i1.Mock
    implements _i4.MeasurementRepository {
  MockMeasurementRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DatabaseService get databaseService =>
      (super.noSuchMethod(Invocation.getter(#databaseService),
          returnValue: _FakeDatabaseService_0()) as _i2.DatabaseService);
  @override
  _i5.Future<_i3.Either<String, _i3.Unit>> createMeasurement(
          {_i6.Measurement? measurement}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #createMeasurement, [], {#measurement: measurement}),
              returnValue: Future<_i3.Either<String, _i3.Unit>>.value(
                  _FakeEither_1<String, _i3.Unit>()))
          as _i5.Future<_i3.Either<String, _i3.Unit>>);
  @override
  _i5.Future<_i3.Either<String, _i3.Unit>> deleteMeasurement({String? id}) =>
      (super.noSuchMethod(Invocation.method(#deleteMeasurement, [], {#id: id}),
              returnValue: Future<_i3.Either<String, _i3.Unit>>.value(
                  _FakeEither_1<String, _i3.Unit>()))
          as _i5.Future<_i3.Either<String, _i3.Unit>>);
  @override
  _i5.Future<_i3.Either<String, List<_i6.Measurement>>> getDetailsByDate(
          {String? preferredWeightUnit,
          String? preferredLengthUnit,
          DateTime? startDate,
          DateTime? endDate,
          String? type}) =>
      (super.noSuchMethod(
          Invocation.method(#getDetailsByDate, [], {
            #preferredWeightUnit: preferredWeightUnit,
            #preferredLengthUnit: preferredLengthUnit,
            #startDate: startDate,
            #endDate: endDate,
            #type: type
          }),
          returnValue: Future<_i3.Either<String, List<_i6.Measurement>>>.value(
              _FakeEither_1<String, List<_i6.Measurement>>())) as _i5
          .Future<_i3.Either<String, List<_i6.Measurement>>>);
  @override
  _i5.Future<_i3.Either<String, List<_i6.Measurement>>> getLatestDetails(
          {String? preferredWeightUnit, String? preferredLengthUnit}) =>
      (super.noSuchMethod(
          Invocation.method(#getLatestDetails, [], {
            #preferredWeightUnit: preferredWeightUnit,
            #preferredLengthUnit: preferredLengthUnit
          }),
          returnValue: Future<_i3.Either<String, List<_i6.Measurement>>>.value(
              _FakeEither_1<String, List<_i6.Measurement>>())) as _i5
          .Future<_i3.Either<String, List<_i6.Measurement>>>);
  @override
  _i5.Future<_i3.Either<String, _i3.Unit>> updateMeasurement(
          {_i6.Measurement? measurement}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #updateMeasurement, [], {#measurement: measurement}),
              returnValue: Future<_i3.Either<String, _i3.Unit>>.value(
                  _FakeEither_1<String, _i3.Unit>()))
          as _i5.Future<_i3.Either<String, _i3.Unit>>);
  @override
  _i5.Future<_i3.Either<String, List<String>>> getAddedTypes() =>
      (super.noSuchMethod(Invocation.method(#getAddedTypes, []),
              returnValue: Future<_i3.Either<String, List<String>>>.value(
                  _FakeEither_1<String, List<String>>()))
          as _i5.Future<_i3.Either<String, List<String>>>);
  @override
  _i5.Future<_i3.Either<String, String>> backupDatabase() =>
      (super.noSuchMethod(Invocation.method(#backupDatabase, []),
              returnValue: Future<_i3.Either<String, String>>.value(
                  _FakeEither_1<String, String>()))
          as _i5.Future<_i3.Either<String, String>>);
  @override
  _i5.Future<_i3.Either<String, _i3.Unit>> restoreDatabase(
          {bool? merge = false, String? stringifiedDatas}) =>
      (super.noSuchMethod(
              Invocation.method(#restoreDatabase, [],
                  {#merge: merge, #stringifiedDatas: stringifiedDatas}),
              returnValue: Future<_i3.Either<String, _i3.Unit>>.value(
                  _FakeEither_1<String, _i3.Unit>()))
          as _i5.Future<_i3.Either<String, _i3.Unit>>);
}
