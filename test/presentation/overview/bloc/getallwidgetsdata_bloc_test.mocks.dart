// Mocks generated by Mockito 5.1.0 from annotations
// in watcha_body/test/presentation/overview/bloc/getallwidgetsdata_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i4;
import 'package:watcha_body/data/data_layer/database_service.dart' as _i2;
import 'package:watcha_body/data/domain/models/measurement_widget.dart' as _i9;
import 'package:watcha_body/data/domain/models/pmeasurement.dart' as _i7;
import 'package:watcha_body/data/repositories/measurement_repository.dart'
    as _i5;
import 'package:watcha_body/data/repositories/widget_repository.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeDatabaseService_0 extends _i1.Fake implements _i2.DatabaseService {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

class _FakeDatabase_2 extends _i1.Fake implements _i4.Database {}

/// A class which mocks [MeasurementRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMeasurementRepository extends _i1.Mock
    implements _i5.MeasurementRepository {
  MockMeasurementRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DatabaseService get databaseService =>
      (super.noSuchMethod(Invocation.getter(#databaseService),
          returnValue: _FakeDatabaseService_0()) as _i2.DatabaseService);
  @override
  _i6.Future<_i3.Either<String, _i3.Unit>> createMeasurement(
          {String? tableName, _i7.Measurement? measurement}) =>
      (super.noSuchMethod(
              Invocation.method(#createMeasurement, [],
                  {#tableName: tableName, #measurement: measurement}),
              returnValue: Future<_i3.Either<String, _i3.Unit>>.value(
                  _FakeEither_1<String, _i3.Unit>()))
          as _i6.Future<_i3.Either<String, _i3.Unit>>);
  @override
  _i6.Future<_i3.Either<String, _i3.Unit>> deleteMeasurement(
          {String? tableName, String? id}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #deleteMeasurement, [], {#tableName: tableName, #id: id}),
              returnValue: Future<_i3.Either<String, _i3.Unit>>.value(
                  _FakeEither_1<String, _i3.Unit>()))
          as _i6.Future<_i3.Either<String, _i3.Unit>>);
  @override
  _i6.Future<_i3.Either<String, List<_i7.Measurement>>> getAllDetails(
          {String? tableName, DateTime? startDate, DateTime? endDate}) =>
      (super.noSuchMethod(
          Invocation.method(#getAllDetails, [], {
            #tableName: tableName,
            #startDate: startDate,
            #endDate: endDate
          }),
          returnValue: Future<_i3.Either<String, List<_i7.Measurement>>>.value(
              _FakeEither_1<String, List<_i7.Measurement>>())) as _i6
          .Future<_i3.Either<String, List<_i7.Measurement>>>);
  @override
  _i6.Future<_i3.Either<String, List<_i7.Measurement>>> getLatestDetails(
          {String? tableName}) =>
      (super.noSuchMethod(
          Invocation.method(#getLatestDetails, [], {#tableName: tableName}),
          returnValue: Future<_i3.Either<String, List<_i7.Measurement>>>.value(
              _FakeEither_1<String, List<_i7.Measurement>>())) as _i6
          .Future<_i3.Either<String, List<_i7.Measurement>>>);
  @override
  _i6.Future<_i3.Either<String, _i3.Unit>> updateMeasurement(
          {String? tableName, _i7.Measurement? measurement}) =>
      (super.noSuchMethod(
              Invocation.method(#updateMeasurement, [],
                  {#tableName: tableName, #measurement: measurement}),
              returnValue: Future<_i3.Either<String, _i3.Unit>>.value(
                  _FakeEither_1<String, _i3.Unit>()))
          as _i6.Future<_i3.Either<String, _i3.Unit>>);
}

/// A class which mocks [WidgetRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWidgetRepository extends _i1.Mock implements _i8.WidgetRepository {
  MockWidgetRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DatabaseService get databaseService =>
      (super.noSuchMethod(Invocation.getter(#databaseService),
          returnValue: _FakeDatabaseService_0()) as _i2.DatabaseService);
  @override
  _i6.Future<_i3.Either<String, _i3.Unit>> addWidget(
          {_i9.MeasurementWidget? measurementWidget}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #addWidget, [], {#measurementWidget: measurementWidget}),
              returnValue: Future<_i3.Either<String, _i3.Unit>>.value(
                  _FakeEither_1<String, _i3.Unit>()))
          as _i6.Future<_i3.Either<String, _i3.Unit>>);
  @override
  _i6.Future<_i3.Either<String, List<_i9.MeasurementWidget>>>
      getAddedWidgets() => (super.noSuchMethod(
              Invocation.method(#getAddedWidgets, []),
              returnValue:
                  Future<_i3.Either<String, List<_i9.MeasurementWidget>>>.value(
                      _FakeEither_1<String, List<_i9.MeasurementWidget>>()))
          as _i6.Future<_i3.Either<String, List<_i9.MeasurementWidget>>>);
  @override
  _i6.Future<_i3.Either<String, List<_i9.MeasurementWidget>>> getAllWidgets() =>
      (super.noSuchMethod(Invocation.method(#getAllWidgets, []),
              returnValue:
                  Future<_i3.Either<String, List<_i9.MeasurementWidget>>>.value(
                      _FakeEither_1<String, List<_i9.MeasurementWidget>>()))
          as _i6.Future<_i3.Either<String, List<_i9.MeasurementWidget>>>);
  @override
  _i6.Future<_i3.Either<String, _i3.Unit>> removeWidget() =>
      (super.noSuchMethod(Invocation.method(#removeWidget, []),
              returnValue: Future<_i3.Either<String, _i3.Unit>>.value(
                  _FakeEither_1<String, _i3.Unit>()))
          as _i6.Future<_i3.Either<String, _i3.Unit>>);
}

/// A class which mocks [DatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseService extends _i1.Mock implements _i2.DatabaseService {
  MockDatabaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, String> get tableCreationQuery =>
      (super.noSuchMethod(Invocation.getter(#tableCreationQuery),
          returnValue: <String, String>{}) as Map<String, String>);
  @override
  set tableCreationQuery(Map<String, String>? _tableCreationQuery) => super
      .noSuchMethod(Invocation.setter(#tableCreationQuery, _tableCreationQuery),
          returnValueForMissingStub: null);
  @override
  _i6.Future<_i4.Database> get database =>
      (super.noSuchMethod(Invocation.getter(#database),
              returnValue: Future<_i4.Database>.value(_FakeDatabase_2()))
          as _i6.Future<_i4.Database>);
  @override
  _i6.Future<void> insert({String? tableName, Map<String, dynamic>? map}) =>
      (super.noSuchMethod(
          Invocation.method(#insert, [], {#tableName: tableName, #map: map}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> update(
          {String? tableName, Map<String, dynamic>? map, String? id}) =>
      (super.noSuchMethod(
          Invocation.method(
              #update, [], {#tableName: tableName, #map: map, #id: id}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  void delete({String? tableName, int? id}) => super.noSuchMethod(
      Invocation.method(#delete, [], {#tableName: tableName, #id: id}),
      returnValueForMissingStub: null);
  @override
  _i6.Future<List<Map<String, dynamic>>> getData(
          {String? tableName,
          int? limit,
          String? orderBy,
          DateTime? startDate,
          DateTime? endDate}) =>
      (super.noSuchMethod(
              Invocation.method(#getData, [], {
                #tableName: tableName,
                #limit: limit,
                #orderBy: orderBy,
                #startDate: startDate,
                #endDate: endDate
              }),
              returnValue: Future<List<Map<String, dynamic>>>.value(
                  <Map<String, dynamic>>[]))
          as _i6.Future<List<Map<String, dynamic>>>);
  @override
  _i6.Future<void> createTable({String? query}) =>
      (super.noSuchMethod(Invocation.method(#createTable, [], {#query: query}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
}
